{"version":3,"file":"component---src-pages-exam-file-name-js-da195d9f516783011dd1.js","mappings":"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","sources":["webpack://fallacies/./src/images/graph5.png","webpack://fallacies/./src/images/graph6.png","webpack://fallacies/./src/pages/exam/{File.name}.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/graph5-f413be44e237ab68802f360f8386b6a0.png\";","export default __webpack_public_path__ + \"static/graph6-8393f6b3875bc72f83f2102eda7d2ee7.png\";","import * as React from 'react';\r\nimport './exam.css';\r\nimport questionsJSON from '../../../content/questions.json';\r\nimport { getAllSiblings, getRandomItemsFromArray, isBrowser, parseHTML, shuffle, toFarsiNumber } from '../../utils';\r\nimport { QUESTION_DELAY } from '../../constants';\r\nimport graph5 from '../../images/graph5.png'\r\nimport graph6 from '../../images/graph6.png'\r\nimport { ImageViewer, ModalResults, Seo } from '../../components';\r\n\r\nconst GRAPH_QUESTION_IMAGES = [\r\n    {\r\n      id: 36,\r\n      image: graph5,\r\n    },\r\n    {\r\n      id: 37,\r\n      image: graph6,\r\n    }\r\n  ];\r\n\r\nconst QUESTIONS = questionsJSON.list.map(question => {\r\n    // first item in each question choices data is the correct answer. So we shuffle the choices array\r\n    // the correct choice is an object but the others are strings\r\n    const choicesRandomized = shuffle(question.choices.map((choice, index) => ({ title: choice.title || choice, isCorrect: index === 0 })));\r\n    \r\n    return { ...question, choices: choicesRandomized, fallacyId: question.choices[0].fallacyId };\r\n});\r\n\r\nconst Exam = ({ params }) => {\r\n    const [iterator, updateIterator] = React.useState(0);\r\n    const EXAM_QUESTIONS = React.useRef(getRandomItemsFromArray(QUESTIONS, Number(params.name)));\r\n    const [isResultsModalVisible, setResultsModalVisibility] = React.useState(false);\r\n    const [activeImageSrc, updateActiveImageSrc] = React.useState(null);\r\n    \r\n    React.useEffect(() => {\r\n        if (isResultsModalVisible) {\r\n            const previousList = JSON.parse(localStorage.getItem('remindingFallacies')) || [];\r\n            const remindingFallacies = EXAM_QUESTIONS.current.filter(_q => _q.hasError).map(_q => _q.fallacyId);\r\n            localStorage.setItem('remindingFallacies', JSON.stringify([...previousList, ...remindingFallacies]));\r\n        }\r\n    }, [isResultsModalVisible]);\r\n\r\n    /* Only for 2 specific questions */\r\n    const renderQuestionImage = item => {\r\n        const questionWithImage = GRAPH_QUESTION_IMAGES.find(({ id }) => item.id === id);\r\n        if (questionWithImage) return (\r\n            <img alt=\"تصویر سؤال\" src={questionWithImage.image} onClick={() => { updateActiveImageSrc(questionWithImage.image); }} />\r\n        );\r\n    };\r\n\r\n    const handleChoiceClick = (e, choice, item) => {\r\n        const selectedButton = e.currentTarget;\r\n        if (choice.isCorrect) {\r\n            selectedButton.classList.add('-correct');\r\n            getAllSiblings(selectedButton).forEach(sibling => { sibling.disabled = true })\r\n        } else {\r\n            const correctChoice = item.choices.find(choice => choice.isCorrect);\r\n            const correctChoiceButton = getAllSiblings(selectedButton).find(button => button.innerText === correctChoice.title);\r\n            correctChoiceButton.classList.add('-correct');\r\n            selectedButton.classList.add('-incorrect');\r\n            EXAM_QUESTIONS.current = EXAM_QUESTIONS.current.map(_q => _q.id === item.id ? ({ ..._q, hasError: true }) : _q);\r\n            getAllSiblings(correctChoiceButton).forEach(sibling => sibling.disabled = true);\r\n        }\r\n        setTimeout(() => {\r\n            if (iterator + 1 === EXAM_QUESTIONS.current.length) setResultsModalVisibility(true);\r\n            else updateIterator(iterator + 1);\r\n        }, QUESTION_DELAY);\r\n    }\r\n\r\n    const renderEachQuestionChoices = item => item.choices.map(choice => {\r\n        return (\r\n            <button aria-label={choice.title} key={choice.title} onClick={(e) => { handleChoiceClick(e, choice, item)}} className='Exam__questionAnswer'>{choice.title}</button>\r\n        )\r\n    });\r\n\r\n    const renderQuestions = () => EXAM_QUESTIONS.current.map((item, index) => {\r\n        const activeClassApply = index === iterator ? '-active' : '';\r\n        const slideClassApply = ((iterator - 1) === index) ? '-slideAway' : '';\r\n        return (\r\n            <div key={item.id} className={`Exam__questionItem ${activeClassApply} ${slideClassApply}`}>\r\n                <div className='Exam__questionText'>\r\n                    <h1>{parseHTML(item.question)}</h1>\r\n                    {renderQuestionImage(item)}\r\n                </div>\r\n                <div className='Exam__questionAnswerList'>\r\n                    {renderEachQuestionChoices(item)}\r\n                </div>\r\n            </div>\r\n        )\r\n    });\r\n    \r\n    return (\r\n        <main className='Exam'>\r\n            <div className='Exam__titleContainer'>\r\n                <h1 className='Exam__title'>سؤال {toFarsiNumber(iterator + 1)} از  {toFarsiNumber(EXAM_QUESTIONS.current.length)}</h1>\r\n                <h2 className='Exam__title'>عبارت زیر، بر وقوع چه نوع مغالطه‌ای دلالت دارد؟</h2>\r\n            </div>\r\n            <div className='Exam__questionList'>\r\n                {renderQuestions()}\r\n            </div>\r\n            {isResultsModalVisible && (\r\n                <ModalResults questions={EXAM_QUESTIONS.current} />\r\n            )}\r\n            <ImageViewer alt=\"تصویر سؤال\" src={activeImageSrc} onClose={() => { updateActiveImageSrc(null); }} />\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default Exam;\r\n\r\nexport const Head = () => <Seo title=\"مغالطات | آزمون\" description=\"آزمون چهار گزینه‌ای از مغالطات\" />\r\n"],"names":["GRAPH_QUESTION_IMAGES","id","image","graph5","graph6","QUESTIONS","questionsJSON","map","question","choicesRandomized","shuffle","choices","choice","index","title","isCorrect","fallacyId","params","iterator","updateIterator","React","EXAM_QUESTIONS","getRandomItemsFromArray","Number","name","isResultsModalVisible","setResultsModalVisibility","activeImageSrc","updateActiveImageSrc","previousList","JSON","parse","localStorage","getItem","remindingFallacies","current","filter","_q","hasError","setItem","stringify","renderEachQuestionChoices","item","key","onClick","e","selectedButton","currentTarget","classList","add","getAllSiblings","forEach","sibling","disabled","correctChoice","find","correctChoiceButton","button","innerText","setTimeout","length","QUESTION_DELAY","handleChoiceClick","className","toFarsiNumber","activeClassApply","slideClassApply","parseHTML","questionWithImage","alt","src","renderQuestionImage","questions","onClose","Head","description"],"sourceRoot":""}